openapi: 3.0.2
info:
  title: ClassroomBotAPI
  version: 0.0.1
paths:
  /assignment:
    get:
      tags:
        - assignment
      summary: Gets an assignment from the database
      description: |-
        Gets the assignment associated with 'channel_id' from the database

        - **channel_id**: the assignment's Discord channel ID
      operationId: get_assignment_assignment_get
      parameters:
        - required: true
          schema:
            title: Channel Id
            type: integer
          name: channel_id
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - assignment
      summary: Create a new assignment in the database
      description: |-
        Creates a new assignment in the database from an Assignment object

        - **assignment**: an Assignment object
      operationId: create_assignment_assignment_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /assignment/:
    put:
      tags:
        - assignment
      summary: Updates assignment in the database
      description: >-
        Updates the assignment associated with 'channel_id' in the database
        using information in 'dictionary'


        - **dictionary**: the assignment information to be updated in dictionary
        format

        - **channel_id**: the assignment's Discord channel ID
      operationId: update_assignment_assignment__put
      parameters:
        - required: true
          schema:
            title: Channel Id
            type: integer
          name: channel_id
          in: query
      requestBody:
        content:
          application/json:
            schema:
              title: Dictionary
              type: object
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /classroom:
    get:
      tags:
        - classroom
      summary: Gets a list of all classrooms in the database
      description: Gets a list of all classrooms in the database
      operationId: get_all_classrooms_classroom_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response Get All Classrooms Classroom Get
                type: array
                items:
                  $ref: '#/components/schemas/Classroom'
    post:
      tags:
        - classroom
      summary: Creates a new classroom in the database
      description: |-
        Creates a new classroom in the database from a Classroom object

        - **classroom**: a Classroom object
      operationId: create_classroom_classroom_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Classroom'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /classroom/:
    delete:
      tags:
        - classroom
      summary: Deletes a specific classroom from the database
      description: |-
        Deletes the classroom associated with 'server_id' from the database

        - **server_id**: the classroom's Discord server ID
      operationId: delete_classroom_classroom__delete
      parameters:
        - required: true
          schema:
            title: Server Id
            type: integer
          name: server_id
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /classroom/{server_id}:
    get:
      tags:
        - classroom
      summary: Gets a specific classroom from the database
      description: |-
        Gets the classroom associated with 'server_id' from the database

        - **server_id**: the classroom's Discord server ID
      operationId: get_classroom_classroom__server_id__get
      parameters:
        - required: true
          schema:
            title: Server Id
            type: integer
          name: server_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Classroom'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /classroom/{server_id}/attendance:
    get:
      tags:
        - classroom
      summary: >-
        Gets the attendance information of a specific classroom from the
        database
      description: >-
        Gets the attendance information of the classroom associated with
        'server_id' from the database


        - **server_id**: the classroom's Discord server ID
      operationId: get_classroom_attendance_classroom__server_id__attendance_get
      parameters:
        - required: true
          schema:
            title: Server Id
            type: integer
          name: server_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /classroom/{server_id}/id:
    get:
      tags:
        - classroom
      summary: Gets the ID of a specific classroom from the database
      description: >-
        Gets the database ID of the classroom associated with 'server_id' from
        the database


        - **server_id**: the classroom's Discord server ID
      operationId: get_classroom_id_classroom__server_id__id_get
      parameters:
        - required: true
          schema:
            title: Server Id
            type: integer
          name: server_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /classroom_user:
    post:
      tags:
        - classroom user
      summary: Creates a new classroom user in the database
      description: >-
        Creates a new classroom user from a Classroom_User object in the
        database


        - **classroom_user**: a Classroom_User object
      operationId: create_classroom_user_classroom_user_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Classroom_User'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /classroom_user/{classroom_id}/student:
    get:
      tags:
        - classroom user
      summary: Gets a list of students of a specific classroom from the database
      description: >-
        Gets a list of students in the classroom associated with 'classroom_id'
        from the database


        - **classroom_id**: the classroom's database ID
      operationId: get_students_classroom_user__classroom_id__student_get
      parameters:
        - required: true
          schema:
            title: Classroom Id
            type: integer
          name: classroom_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                title: >-
                  Response Get Students Classroom User  Classroom Id  Student
                  Get
                type: array
                items:
                  $ref: '#/components/schemas/Classroom_User'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /classroom_user/{classroom_id}/educator:
    get:
      tags:
        - classroom user
      summary: Gets a list of educators of a specific classroom from the database
      description: >-
        Gets a list of educators in the classroom associated with 'classroom_id'
        from the database


        - **classroom_id**: the classroom's database ID
      operationId: get_educators_classroom_user__classroom_id__educator_get
      parameters:
        - required: true
          schema:
            title: Classroom Id
            type: integer
          name: classroom_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                title: >-
                  Response Get Educators Classroom User  Classroom Id  Educator
                  Get
                type: array
                items:
                  $ref: '#/components/schemas/Classroom_User'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /classroom_user/{user_id}/{classroom_id}/attendance:
    get:
      tags:
        - classroom user
      summary: Gets the attendance information of a specific student from the database
      description: >-
        Gets the attendance information of the user associated with 'user_id' in
        the classroom associated with 'classroom_id' from the database


        - **user_id**: the user's database ID

        - **classroom_id**: the classroom's database ID
      operationId: >-
        get_classroom_user_attendance_classroom_user__user_id___classroom_id__attendance_get
      parameters:
        - required: true
          schema:
            title: User Id
            type: integer
          name: user_id
          in: path
        - required: true
          schema:
            title: Classroom Id
            type: integer
          name: classroom_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - classroom user
      summary: Updates the attendance information of a specifc student in the database
      description: >-
        Updates the attendance of the user associated with 'user_id' in the
        classroom associated with 'classroom_id' in the database


        - **user_id**: the user's database ID

        - **classroom_id**: the classroom's database ID
      operationId: >-
        update_user_attendance_classroom_user__user_id___classroom_id__attendance_put
      parameters:
        - required: true
          schema:
            title: User Id
            type: integer
          name: user_id
          in: path
        - required: true
          schema:
            title: Classroom Id
            type: integer
          name: classroom_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /classroom_user/{user_id}/{classroom_id}/role:
    put:
      tags:
        - classroom user
      summary: Updates the username of a specific user in the database
      description: >-
        Updates the username of the user associated with 'discord_id' to
        'new_name' in the database


        - **new_name**: the user's new username

        - **discord_id**: the user's discord ID
      operationId: >-
        update_classroom_user_name_classroom_user__user_id___classroom_id__role_put
      parameters:
        - required: true
          schema:
            title: New Name
            type: string
          name: new_name
          in: query
        - required: true
          schema:
            title: Discord Id
            type: integer
          name: discord_id
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /discussion:
    post:
      tags:
        - discussion
      summary: Creates a new discussion board in the database
      description: |-
        Creates a new discussion board in the database from a Discussion object

        - **discussion**: a Discussion object
      operationId: create_discussion_discussion_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Discussion'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /grade:
    post:
      tags:
        - grade
      summary: Creates a new grade in the database
      description: |-
        Creates a new grade in the database from a Grade object

        - **grade**: a Grade object
      operationId: create_grade_grade_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Grade'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /grade/{student_id}:
    get:
      tags:
        - grade
      summary: Gets a list of all grades of a specific student from the database
      description: |-
        Gets a list of all grades for the student associated with 'student_id'

        - **student_id**: the student's database ID
      operationId: get_grades_grade__student_id__get
      parameters:
        - required: true
          schema:
            title: Student Id
          name: student_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response Get Grades Grade  Student Id  Get
                type: array
                items:
                  $ref: '#/components/schemas/Grade'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  grade/:
    put:
      tags:
        - grade
      summary: Updates a grade in the database
      description: |-
        Updates a grade in the database using a Grade object

        - **grade**: a Grade object
      operationId: update_gradegrade__put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Grade'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /quiz/:
    get:
      tags:
        - quiz
      summary: Gets a specific quiz from the database
      description: |-
        Gets the quiz associated with 'channel_id' from the database

        - **channel_id**: the quiz's Discord channel ID
      operationId: get_quiz_quiz__get
      parameters:
        - required: true
          schema:
            title: Channel Id
            type: integer
          name: channel_id
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - quiz
      summary: Updates a quiz in the database
      description: >-
        Updates the quiz associated with 'channel_id' in the database using
        information in 'dictionary'


        - **dictionary**: the quiz information to be updated in dictionary
        format

        - **channel_id**: the quiz's Discord channel ID
      operationId: update_quiz_quiz__put
      parameters:
        - required: true
          schema:
            title: Channel Id
            type: integer
          name: channel_id
          in: query
      requestBody:
        content:
          application/json:
            schema:
              title: Dictionary
              type: object
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /quiz:
    post:
      tags:
        - quiz
      summary: Creates a new quiz in the database
      description: |-
        Creates a new quiz in the database from a Quiz object

        - **quiz**: a Quiz object
      operationId: create_quiz_quiz_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quiz'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /quiz/{quiz_id}/questions/:
    get:
      tags:
        - quiz
      summary: >-
        Gets the URL containing the questions of a specific quiz from the
        database
      description: >-
        Gets a URL that links to questions of the quiz associated with 'quiz_id'
        in JSON format


        - **quiz_id**: the quiz's database ID
      operationId: get_questions_quiz__quiz_id__questions__get
      parameters:
        - required: true
          schema:
            title: Quiz Id
            type: integer
          name: quiz_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /quiz/questions/:
    post:
      tags:
        - quiz
      summary: Creates URL containing questions for a quiz
      description: |-
        Creates a URL that links to quiz questions in JSON format

        - **questions**: a list of Question objects
      operationId: create_questions_quiz_questions__post
      requestBody:
        content:
          application/json:
            schema:
              title: Questions
              type: array
              items:
                $ref: '#/components/schemas/Question'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /token/:
    post:
      tags:
        - token
      summary: Updates a token in the database
      description: |-
        Updates a token in the database from a Token object

        - **user**: a Token object
      operationId: update_token_token__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /user:
    post:
      tags:
        - user
      summary: Creates a new user in the database
      description: |-
        Creates a new user in the database from a User object

        - **user**: a User object
      operationId: create_user_user_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /user/{discord_id}:
    get:
      tags:
        - user
      summary: Gets a specific user from the database
      description: |-
        Gets the user associated with 'discord_id' from the databse

        - **discord_id**: the user's discord ID
      operationId: get_user_user__discord_id__get
      parameters:
        - required: true
          schema:
            title: Discord Id
            type: integer
          name: discord_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /user/{discord_id}/id:
    get:
      tags:
        - user
      summary: Gets the ID of a specific user from the database
      description: |-
        Updates the database ID of the user associated with 'discord_id'

        - **discord_id**: the user's discord ID
      operationId: get_user_id_user__discord_id__id_get
      parameters:
        - required: true
          schema:
            title: Discord Id
            type: integer
          name: discord_id
          in: path
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /user/{discord_id}/nick:
    put:
      tags:
        - user
      summary: Updates the username of a specific user in the database
      description: >-
        Updates the username associated with 'discord_id' to 'name' in the
        database


        - **discord_id**: the user's discord ID

        - **name**: the user's new username
      operationId: update_user_name_user__discord_id__nick_put
      parameters:
        - required: true
          schema:
            title: Discord Id
            type: integer
          name: discord_id
          in: path
        - required: true
          schema:
            title: Name
            type: string
          name: name
          in: query
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    Assignment:
      title: Assignment
      required:
        - channelId
        - points
        - startDate
        - dueDate
        - classroomId
        - title
      type: object
      properties:
        id:
          title: Id
          type: integer
        channelId:
          title: Channelid
          type: integer
        points:
          title: Points
          type: integer
        startDate:
          title: Startdate
          type: string
        dueDate:
          title: Duedate
          type: string
        classroomId:
          title: Classroomid
          type: integer
        title:
          title: Title
          type: string
    Classroom:
      title: Classroom
      required:
        - attendance
        - serverId
        - serverName
      type: object
      properties:
        id:
          title: Id
          type: integer
        attendance:
          title: Attendance
          type: integer
        serverId:
          title: Serverid
          type: integer
        serverName:
          title: Servername
          type: string
    Classroom_User:
      title: Classroom_User
      required:
        - classroomId
        - role
        - userId
      type: object
      properties:
        classroomId:
          title: Classroomid
          type: integer
        role:
          title: Role
          type: string
        userId:
          title: Userid
          type: integer
        attendance:
          title: Attendance
          type: integer
    Discussion:
      title: Discussion
      required:
        - classroomId
        - channelId
        - title
        - points
        - startDate
        - dueDate
      type: object
      properties:
        id:
          title: Id
          type: integer
        classroomId:
          title: Classroomid
          type: integer
        channelId:
          title: Channelid
          type: integer
        title:
          title: Title
          type: string
        points:
          title: Points
          type: integer
        startDate:
          title: Startdate
          type: string
        dueDate:
          title: Duedate
          type: string
    Grade:
      title: Grade
      required:
        - taskType
        - graderId
        - taskId
        - studentId
        - score
      type: object
      properties:
        taskType:
          title: Tasktype
          type: string
        graderId:
          title: Graderid
          type: integer
        taskId:
          title: Taskid
          type: integer
        studentId:
          title: Studentid
          type: integer
        score:
          title: Score
          type: integer
    HTTPValidationError:
      title: HTTPValidationError
      type: object
      properties:
        detail:
          title: Detail
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
    Question:
      title: Question
      required:
        - question
        - answer
        - wrong
        - points
      type: object
      properties:
        question:
          title: Question
          type: string
        answer:
          title: Answer
          type: string
        wrong:
          title: Wrong
          type: array
          items:
            type: string
        points:
          title: Points
          type: number
    Quiz:
      title: Quiz
      required:
        - questions
        - channelId
        - title
        - points
        - startDate
        - dueDate
        - timeLimit
        - classroomId
      type: object
      properties:
        id:
          title: Id
          type: integer
        questions:
          title: Questions
          type: string
        channelId:
          title: Channelid
          type: integer
        title:
          title: Title
          type: string
        points:
          title: Points
          type: number
        startDate:
          title: Startdate
          type: string
        dueDate:
          title: Duedate
          type: string
        timeLimit:
          title: Timelimit
          type: integer
        classroomId:
          title: Classroomid
          type: integer
    Token:
      title: Token
      required:
        - userId
        - unique_id
      type: object
      properties:
        userId:
          title: Userid
          type: integer
        unique_id:
          title: Unique Id
          type: string
    User:
      title: User
      required:
        - name
        - discordId
      type: object
      properties:
        id:
          title: Id
          type: integer
        name:
          title: Name
          type: string
        discordId:
          title: Discordid
          type: integer
    ValidationError:
      title: ValidationError
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          title: Location
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
