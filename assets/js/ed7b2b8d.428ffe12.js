"use strict";(self.webpackChunktu_cis_4398_docs_template=self.webpackChunktu_cis_4398_docs_template||[]).push([[961],{3905:(t,e,a)=>{a.d(e,{Zo:()=>l,kt:()=>p});var n=a(7294);function s(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function r(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){s(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,s=function(t,e){if(null==t)return{};var a,n,s={},o=Object.keys(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||(s[a]=t[a]);return s}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)a=o[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(s[a]=t[a])}return s}var d=n.createContext({}),c=function(t){var e=n.useContext(d),a=e;return t&&(a="function"==typeof t?t(e):r(r({},e),t)),a},l=function(t){var e=c(t.components);return n.createElement(d.Provider,{value:e},t.children)},u="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},h=n.forwardRef((function(t,e){var a=t.components,s=t.mdxType,o=t.originalType,d=t.parentName,l=i(t,["components","mdxType","originalType","parentName"]),u=c(a),h=s,p=u["".concat(d,".").concat(h)]||u[h]||m[h]||o;return a?n.createElement(p,r(r({ref:e},l),{},{components:a})):n.createElement(p,r({ref:e},l))}));function p(t,e){var a=arguments,s=e&&e.mdxType;if("string"==typeof t||s){var o=a.length,r=new Array(o);r[0]=h;var i={};for(var d in e)hasOwnProperty.call(e,d)&&(i[d]=e[d]);i.originalType=t,i[u]="string"==typeof t?t:s,r[1]=i;for(var c=2;c<o;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5531:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(7462),s=(a(7294),a(3905));const o={sidebar_position:1},r="Architecture",i={unversionedId:"system-architecture/design",id:"system-architecture/design",title:"Architecture",description:"Class Diagram",source:"@site/docs/system-architecture/design.md",sourceDirName:"system-architecture",slug:"/system-architecture/design",permalink:"/project-discord-classroom/docs/system-architecture/design",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Spring/project-discord-classroom/edit/main/documentation/docs/system-architecture/design.md",tags:[],version:"current",lastUpdatedBy:"timlopes17",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"System Architecture",permalink:"/project-discord-classroom/docs/category/system-architecture"},next:{title:"API Specification",permalink:"/project-discord-classroom/docs/category/api-specification"}},d={},c=[{value:"Class Diagram",id:"class-diagram",level:2},{value:"Database Design",id:"database-design",level:2},{value:"Sequence Diagrams",id:"sequence-diagrams",level:2},{value:"Use Case #1: Educator /lecture attendance command",id:"use-case-1-educator-lecture-attendance-command",level:3},{value:"Use Case #2: Student /grades command",id:"use-case-2-student-grades-command",level:3},{value:"Use Case #3: Student takes practice quiz",id:"use-case-3-student-takes-practice-quiz",level:3},{value:"Use Case #4: Student wants to ask the educator a question",id:"use-case-4-student-wants-to-ask-the-educator-a-question",level:3},{value:"Use Case #5: Educator creates poll with /poll",id:"use-case-5-educator-creates-poll-with-poll",level:3},{value:"Use Case #6: Educator takes attendance with /attendance command",id:"use-case-6-educator-takes-attendance-with-attendance-command",level:3}],l={toc:c};function u(t){let{components:e,...a}=t;return(0,s.kt)("wrapper",(0,n.Z)({},l,a,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"architecture"},"Architecture"),(0,s.kt)("h2",{id:"class-diagram"},"Class Diagram"),(0,s.kt)("mermaid",{value:"---\ntitle: Class Diagram\n---\nclassDiagram\n    main --\x3e bot\n    bot --\x3e api\n    api --\x3e supabase\n    bot --\x3e discord\n    create_classes --\x3e Assignment\n    create_classes --\x3e Classroom\n    create_classes --\x3e  Classroom_user\n    create_classes --\x3e Discussion\n    create_classes --\x3e  Grade\n    create_classes --\x3e Question\n    create_classes --\x3e Quiz\n    create_classes --\x3e Token\n    create_classes --\x3e User\n    api --\x3e create_classes\n    bot --\x3e create_assignment\n    bot --\x3e create_discussion\n    bot --\x3e create_quiz\n    create_assignment --\x3e create_classes\n    create_discussion --\x3e create_classes\n    create_quiz --\x3e create_classes\n\n\n    class main{\n        +run_bot()\n    }\n    class bot{\n        -configData: dictionary\n        -DISCORD_TOKEN: string\n        -PREFIX: char\n        -SB_URL: string\n        -SB_KEY: string\n        -supabase: Client\n        -bot: Bot\n        -app: App\n        +run_discord_bot()\n        -on_ready()\n        -on_guild_join(guide: string)\n        -syllabus(ctx: context)\n        -poll(ctx: context, arg1: string, arg2: string)\n    }\n    class api{\n        +FastAPI(): App\n    }\n    class supabase{\n        +create_client(): Client\n    }\n    class discord{\n        +commands.Bot(): Bot\n    }\n    class Assignment{\n        -id: int\n        -channelId: int\n        -points: int\n        -startDate: str\n        -dueDate: str\n        -classroomId: int\n        -title: str \n    }\n    class Classroom{\n\t    -id: int\n        -attendace: int\n        -serverId: int\n\t    -serverName: str\n    }\n    class Classroom_user{\n\tclassroomId: int\n\trole: str\n\tuserId: int\n\tattendance: int\n    }\n    class Discussion{\n        id: int\n        classroomId: int\n        channelId: int\n        title: str\n        points: int\n        startDate: str\n        dueDate: str\n    }\n    class Grade{\n        taskType: str\n        graderId: int\n        taskId: int\n        studentId: int\n        score: int\n    }\n    class Question{\n        question: str\n        answer: str\n        wrong: List[str]\n        points: float\n    }\n    class Quiz{\n        id: int\n        questions: str\n        channelId: int\n        title: str\n        points: float\n        startDate: str\n        dueDate: str\n        timeLimit: int\n        classroomId: int\n    }\n    class Token{\n        userId: int\n        unique_id: str\n    }\n\n    class User{\n        id: int\n        name: str\n        discordId: int\n    }\n    class create_quiz{\n        +EditModal: class\n        +InputModal: class\n        +TakeQuiz: class\n        +StartQuiz: class\n        -QuizModal: class\n        +create_quiz(): QuizModal\n    }\n    class create_assignment{\n        -AssignmentModal: class\n        create_assignment(): AssignmentModal\n    }\n    class create_discussion{\n        -DiscussionModal: class\n        create_discussion(): DiscussionModal\n    }"}),(0,s.kt)("p",null,"The class diagram shows the structure of our project in Python. First, the main.py file calls run_bot() from bot.py. bot.py is connected directly to the discord library to start up the bot. Also it uses the api.py file to connect to the Supabase database. The api.py uses the create_classes.py to create a struct of the values inside of the database. Also, in bot.py there are three classes: create_assignment, create_discussion, and create_quiz which are responsible for sending Modals to users to fill out to generate school work. These modals incorperate the structs from create_classes to easily add to the database."),(0,s.kt)("h2",{id:"database-design"},"Database Design"),(0,s.kt)("mermaid",{value:"---\ntitle: Database Design\n---\nerDiagram\n    CLASSROOM {\n        int id PK\n        string serverId\n        string name\n        int attendance\n    }\n    CLASSROOM_USER {\n        int id PK\n        int classroomId FK\n        int userId FK\n        string role\n        int attendance\n    }\n    USER {\n        int id PK\n        string name\n        string discordId\n    }\n    ASSIGNMENT {\n        int id PK\n        string name\n        int points\n        dateFormat startDate\n        dateFormat dueDate\n        int channelId\n        int classroomId FK\n    }\n    QUIZ {\n        int id PK\n        string title\n        int points\n        dateFormat startDate\n        dateFormat dueDate\n        int timeLimit\n        string questionsUrl\n        int channelId\n        int classroomId FK\n    }\n    DISCUSSION {\n       int id PK\n       int title\n       int points\n       dateFormat startDate\n       dateFormat dueDate \n       int channelId\n       int classroomId FK\n    }\n    GRADE {\n        int id PK\n        string taskType\n        int taskId FK\n        int studentId FK\n        int graderId FK\n        int score\n        int messageId\n    }\n    TOKENS {\n        int id PK\n        int userId FK\n        time created_at\n        time expire_at\n        string unique_id\n    }\n    CLASSROOM ||--|{ CLASSROOM_USER : has\n    CLASSROOM_USER }|--|| USER : has\n    CLASSROOM }|--|| ASSIGNMENT : is\n    CLASSROOM }|--|| QUIZ : is\n    CLASSROOM }|--|| DISCUSSION : is\n    USER ||--o{ GRADE : has\n    USER ||--o| TOKENS : has"}),(0,s.kt)("p",null,"Each time the bot is added to a Discord server a new row is added to the CLASSROOM table. This table holds discord server name and the total attendance and grade used to calculate student's grades and attendance scores. Each CLASSROOM contains one or more EDUCATORS and one or more STUDENTS. The STUDENT table holds the student's username, the classroom they belong to, their grade, and their attendance score. Their total grade will equal their grade divided by the CLASSROOM totalGrade. Next we have the ASSIGNMENT, QUIZ, and DISCUSSION tables. The ASSIGNMENT table keeps track of the assignments the EDUCATOR creates which includes the name of the assignment, when to make it available, and when its due. The QUIZ table keeps track of EDUCATOR created quizzes which holds the max score of the quiz, the start/due date, and an optional time limit for the quiz. Each QUIZ is made up of QUESTIONS which contain a prompt, a correct answer, and optional wrong answers depending on the type of question. (If no wrong answers then its a open-ended question or fill-in-the-blank, if one wrong answer could be a True/False, and if all wrong answers are given then its multiple choice). The DISCUSSION table is used to keep track of the Discussions within the Discord server. These will only include max scores and start/due dates. Finally the GRADES table holds all of the grades for the students. TOKENS are used to allow users to upload to the website and have a time limit to prevent misuse. "),(0,s.kt)("h2",{id:"sequence-diagrams"},"Sequence Diagrams"),(0,s.kt)("details",null,(0,s.kt)("summary",null,(0,s.kt)("h3",{id:"use-case-1-educator-lecture-attendance-command"},"Use Case #1: Educator /lecture attendance command"),(0,s.kt)("mermaid",{value:'sequenceDiagram\n    actor Educator\n    actor Student1\n    actor Student2\n    participant Discord\n    participant ClassroomBot\n    participant Supabase DB\n    Educator->>Discord: User sends "/lecture attendance" command\n    activate Educator\n    activate Discord\n    activate Student1\n    activate Student2\n    activate ClassroomBot\n\n    Discord->>ClassroomBot: ClassroomBot reads command from Discord\n    ClassroomBot->>Discord: message to react to for attendance\n    Student1->>Discord: reacts to message\n    Student2->>Discord: reacts to message\n    Educator->>Discord: command to close attendance\n    Discord->>ClassroomBot: Attendance metrics\n    ClassroomBot ->> Supabase DB: Record attendance for current message/session\n    ClassroomBot ->> Discord: Session attendance summary\n    Discord->> Educator: Summary of the sessions attendance, + list of missing names\n    deactivate Discord\n    deactivate Educator\n    deactivate ClassroomBot'})),(0,s.kt)("div",null,(0,s.kt)("div",null,"As an educator, I want to record the attendance of a lecture."),(0,s.kt)("br",null),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Educator types ",(0,s.kt)("inlineCode",{parentName:"li"},"/lecture attendance")," command"),(0,s.kt)("li",{parentName:"ol"},"The Bot reads the command and sends an attendance message to the discord"),(0,s.kt)("li",{parentName:"ol"},"The students are able to react to the message"),(0,s.kt)("li",{parentName:"ol"},"The educator sends a command to close the attendance "),(0,s.kt)("li",{parentName:"ol"},"The bot checks the attendance metrics (by checking the reactions)"),(0,s.kt)("li",{parentName:"ol"},"The bot sends the metrics to the Supabase Database"),(0,s.kt)("li",{parentName:"ol"},"The bot sends the attendance summary to the educator, with a list of missing students")))),(0,s.kt)("details",null,(0,s.kt)("summary",null,(0,s.kt)("h3",{id:"use-case-2-student-grades-command"},"Use Case #2: Student /grades command"),(0,s.kt)("mermaid",{value:'sequenceDiagram\n    actor Student\n    participant Discord\n    participant ClassroomBot\n    participant FastAPI\n    participant Supabase DB\n    Student->>Discord: User sends "/grades" command\n    activate Student\n    activate Discord\n    Discord->>ClassroomBot: ClassroomBot reads command from Discord\n    activate ClassroomBot\n    ClassroomBot->>FastAPI: GET grades from GRADES table where student_id == Student\n    activate FastAPI\n    FastAPI->>Supabase DB: API request to database\n    activate Supabase DB\n    Supabase DB--\x3e>FastAPI: Returns list of GRADED assignments, quizzes, disucssions\n    deactivate Supabase DB\n    FastAPI --\x3e> ClassroomBot: Sends list from Supabase to bot\n    deactivate FastAPI\n    ClassroomBot --\x3e> Discord: DMs student their grades for each task\n    deactivate ClassroomBot\n    Discord--\x3e> Student: Student reads DM from ClassroomBot\n    deactivate Discord\n    deactivate Student'})),(0,s.kt)("div",null,(0,s.kt)("div",null,"As a student user I want to check my grades for the class."),(0,s.kt)("br",null),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"The student types ",(0,s.kt)("inlineCode",{parentName:"li"},"/grades")," command within the classroom discord server."),(0,s.kt)("li",{parentName:"ol"},"The ClassroomBot reads the command from the server"),(0,s.kt)("li",{parentName:"ol"},"Using FastAPI an API GET request is made for the grades"),(0,s.kt)("li",{parentName:"ol"},"The request is forwarded to the Supabase Database"),(0,s.kt)("li",{parentName:"ol"},"Supabase returns the grades for that student as a list"),(0,s.kt)("li",{parentName:"ol"},"FastAPI sends the list to the application"),(0,s.kt)("li",{parentName:"ol"},"The application parses through the grades and neatly organizes them and direct messages the student their grades"),(0,s.kt)("li",{parentName:"ol"},"The student reads their DMs to check their grades.")))),(0,s.kt)("details",null,(0,s.kt)("summary",null,(0,s.kt)("h3",{id:"use-case-3-student-takes-practice-quiz"},"Use Case #3: Student takes practice quiz"),(0,s.kt)("mermaid",{value:"\nsequenceDiagram\nactor u as Student\nparticipant d as Discord\nparticipant c as ClassroomBot\nparticipant f as FastAPI\nparticipant s as Supabase DB\n\nu->>d: Student types /tutor quiz in Quiz text channel\nd->>c: Reads command from Discord\nc->>f: GET list of current practice quizes from DataBase\nf->>s: API request from DataBase\ns--\x3e>f: Return list of Practice Quizes\nf--\x3e>c: Sends list from DataBase to ClassRoom Bot\nc--\x3e>d: The Bot lists the available Practice Quizes\nd--\x3e>u: Student reads the list of Quizes they can take\nu->>d: Student types /pquiz 2 in Quiz text channel\nd->>c: Reads command from Discord\nc->>f: GET Practice Quiz 2 from the DataBase\nf->>s: API request from DataBase\ns--\x3e>f: Return Practice Quiz 2\nf--\x3e>c: Sends Practice Quiz 2 from the DatBase to ClassRoom Bot\nc--\x3e>d: The Bot Dms the student the questions for the practice quiz\nd--\x3e>u: Student reads the questions as they are messaged them\nu->>d: Student answers the questions to the Bot via DM\nd->>c: Reads answers and copies them\nc->>f: PUSH answers to DataBase\nf->>s: Record students answers\ns--\x3e>f: Return Student answers and Practice Quiz answers \nf--\x3e>c: Compare the answers and Return Correct and incorect answers \nc--\x3e>d: The Bot DMs the results to the student\nd--\x3e>u: Student knows where they stand on the topic by the results"})),(0,s.kt)("div",null,(0,s.kt)("div",null,"This Diagram shows the process of a student wanting to take a Practice Quiz."),(0,s.kt)("br",null),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Student types ",(0,s.kt)("inlineCode",{parentName:"li"},"/tutor quiz")),(0,s.kt)("li",{parentName:"ol"},"The Bot reads the command and sends a request for the list of quizzes available to the API."),(0,s.kt)("li",{parentName:"ol"},"The API gets the data from the database and returns it to the Bot."),(0,s.kt)("li",{parentName:"ol"},"The Bot lists the available quizzes."),(0,s.kt)("li",{parentName:"ol"},"The Student reads the available quizzes and types ",(0,s.kt)("inlineCode",{parentName:"li"},"/tutor quiz")," 2 to take the quiz they want."),(0,s.kt)("li",{parentName:"ol"},"The bot reads the command and sends the request for the specific quiz to the API."),(0,s.kt)("li",{parentName:"ol"},"The API gets the questions from the database and returns them to the Bot."),(0,s.kt)("li",{parentName:"ol"},"The Bot DMs the student the questions."),(0,s.kt)("li",{parentName:"ol"},"The Student answers the questions."),(0,s.kt)("li",{parentName:"ol"},"The Bot reads the answers and pushes them to the API."),(0,s.kt)("li",{parentName:"ol"},"The API pushes the answers to the Database to be saved and then returns the answers key for the quiz and the student's answers."),(0,s.kt)("li",{parentName:"ol"},"The API compares the two and returns the incorrect and correct answers to the Bot."),(0,s.kt)("li",{parentName:"ol"},"The Bot messages the Student their results."),(0,s.kt)("li",{parentName:"ol"},"The student knows where they stand on the topic due to their results.")))),(0,s.kt)("details",null,(0,s.kt)("summary",null,(0,s.kt)("h3",{id:"use-case-4-student-wants-to-ask-the-educator-a-question"},"Use Case #4: Student wants to ask the educator a question"),(0,s.kt)("mermaid",{value:'\nsequenceDiagram\n    actor Student\n    actor Educator\n    participant Discord\n    participant ClassroomBot\n    Student->>Discord: User sends "/private [question]" command\n    activate Student\n    activate Discord\n    Discord->>ClassroomBot: ClassroomBot reads command from Discord\n    activate ClassroomBot\n    ClassroomBot->>Discord: creates a new private chat\n    deactivate ClassroomBot\n    activate Educator\n    Discord->>Educator: Educator is added to private chat\n    Discord->>Student: Student is added to private chat\n    Student->>Discord: Student asks question in chat\n    Discord->>Educator: Educator receives question\n    Educator->>Discord: Educator responds to question\n    Discord->>Student: Student receives educator\'s response\n    deactivate Discord\n    deactivate Educator\n    deactivate Student\n    '})),(0,s.kt)("div",null,(0,s.kt)("div",null,"This diagram shows a student asking a question to the educator by creating a ticket for a private chat"),(0,s.kt)("br",null),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Student types ",(0,s.kt)("inlineCode",{parentName:"li"},"/private [question]")," command"),(0,s.kt)("li",{parentName:"ol"},"ClassroomBot reads the command from discord"),(0,s.kt)("li",{parentName:"ol"},"The bot creates a new private chat"),(0,s.kt)("li",{parentName:"ol"},"The educator and student are added to the private chat"),(0,s.kt)("li",{parentName:"ol"},"Student can message the question to the educator"),(0,s.kt)("li",{parentName:"ol"},"Educator responds to the students question"),(0,s.kt)("li",{parentName:"ol"},"Student receives the educator's response")))),(0,s.kt)("details",null,(0,s.kt)("summary",null,(0,s.kt)("h3",{id:"use-case-5-educator-creates-poll-with-poll"},"Use Case #5: Educator creates poll with /poll"),(0,s.kt)("mermaid",{value:'\nsequenceDiagram\n    actor Educator\n    participant Discord\n    participant ClassroomBot\n    Educator->>Discord: User sends "/poll" command\n    activate Discord\n    Discord->>ClassroomBot: ClassroomBot reads command from Discord\n    activate ClassroomBot\n    ClassroomBot->>Discord: ClassroomBot prompts user for poll options\n    Discord->>Educator: Educator receives poll prompt\n    Educator->>Discord: Educator replies with poll question and options\n    Discord->>ClassroomBot: ClassroomBot reads response from Discord\n    ClassroomBot->>Discord: ClassroomBot publishes poll to Discord and sends confirmation to educator\n    Discord->>Educator: Educator receives confirmation that poll was created\n    deactivate ClassroomBot\n    deactivate Discord\n    '})),(0,s.kt)("div",null,(0,s.kt)("div",null,"This diagram shows an educator creating a poll for the students to respond to"),(0,s.kt)("br",null),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"The educator enters the ",(0,s.kt)("inlineCode",{parentName:"li"},"/poll")," command"),(0,s.kt)("li",{parentName:"ol"},"The ClassroomBot reads the command from Discord"),(0,s.kt)("li",{parentName:"ol"},"The bot prompts the user for the poll question and options"),(0,s.kt)("li",{parentName:"ol"},"The educator enters the specified information on Discord"),(0,s.kt)("li",{parentName:"ol"},"The ClassroomBot reads the data from Discord"),(0,s.kt)("li",{parentName:"ol"},"The ClassroomBot formats the poll message and publishes it to Discord"),(0,s.kt)("li",{parentName:"ol"},"The educator receives confirmation that their poll was created")))),(0,s.kt)("details",null,(0,s.kt)("summary",null,(0,s.kt)("h3",{id:"use-case-6-educator-takes-attendance-with-attendance-command"},"Use Case #6: Educator takes attendance with /attendance command"),(0,s.kt)("mermaid",{value:"\nsequenceDiagram\n    actor User\n    participant Discord\n    participant ClassroomBot\n    participant Student1\n    participant Student2\n    participant FastAPI\n    participant Database\n\n    User->>Discord: /attendance\n    activate Discord\n\n    Discord->>ClassroomBot: attendance()\n    deactivate Discord\n    activate ClassroomBot\n\n    ClassroomBot->>ClassroomBot: timerOn()\n    \n    loop\n        ClassroomBot->> Student1: asks for an input\n        activate Student1\n        ClassroomBot->>Student1: remainingTime(5 minute)\n        Student1--\x3e>Discord: /present\n        deactivate Student1\n        Discord->>ClassroomBot: /present\n        ClassroomBot->> Student2: asks for an input\n        ClassroomBot->>Student2: remainingTime(5 minute)\n    end\n\n    Student2--\x3e>Discord: null \n    Discord->>ClassroomBot: null\n    ClassroomBot->>ClassroomBot: timerOff()\n    ClassroomBot->>FastAPI: markAttendance()\n    deactivate ClassroomBot\n    activate FastAPI\n    FastAPI->>Database:save(student1_attended)\n    activate Database\n    FastAPI->>Database:save(student2_absent)\n    deactivate FastAPI\n    deactivate Database    \n    ClassroomBot->>FastAPI: retrieveAttendance()\n\n    activate FastAPI\n    FastAPI->>Database: retrieve_student_absent_list()\n    \n    activate Database\n\n    Database--\x3e>FastAPI: students_absent_list\n    deactivate FastAPI\n    deactivate Database\n    activate FastAPI\n    FastAPI--\x3e>ClassroomBot: Students_absent_list\n    deactivate FastAPI\n\n    activate ClassroomBot\n    ClassroomBot--\x3e>Discord: Students_absent_list\n    deactivate ClassroomBot"})),(0,s.kt)("div",null,(0,s.kt)("div",null,"This diagram shows the process of recording students attendance. "),(0,s.kt)("br",null),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"User sends a command to the Discord server to initiate attendance tracking by typing ",(0,s.kt)("inlineCode",{parentName:"li"},"/attendance"),"."),(0,s.kt)("li",{parentName:"ol"},"The Discord server then passes the attendance request to the ClassroomBot."),(0,s.kt)("li",{parentName:"ol"},"The ClassroomBot starts a timer and begins a loop asking students in the classroom if they are present or not."),(0,s.kt)("li",{parentName:"ol"},"Student1  responds with present whereas Student2 does not."),(0,s.kt)("li",{parentName:"ol"},"Once loop is complete, the ClassroomBot deactivates and sends a request to FastAPI to mark the attendance."),(0,s.kt)("li",{parentName:"ol"},"The FastAPI stores the attendance data in a Database."),(0,s.kt)("li",{parentName:"ol"},"The FastAPI service then retrieves the list of students who were marked absent in the database and sends it back to the ClassroomBot."),(0,s.kt)("li",{parentName:"ol"},"The ClassroomBot activates again and receives the list of absent students from the FastAPI service."),(0,s.kt)("li",{parentName:"ol"},"The ClassroomBot sends the list of absent students to the Discord server for notification to the User.")))))}u.isMDXComponent=!0}}]);