"use strict";(self.webpackChunktu_cis_4398_docs_template=self.webpackChunktu_cis_4398_docs_template||[]).push([[1270],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>m});var r=n(7294);function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){s(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function a(t,e){if(null==t)return{};var n,r,s=function(t,e){if(null==t)return{};var n,r,s={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(s[n]=t[n]);return s}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(s[n]=t[n])}return s}var c=r.createContext({}),l=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=l(t.components);return r.createElement(c.Provider,{value:e},t.children)},p="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(t,e){var n=t.components,s=t.mdxType,o=t.originalType,c=t.parentName,u=a(t,["components","mdxType","originalType","parentName"]),p=l(n),f=s,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||o;return n?r.createElement(m,i(i({ref:e},u),{},{components:n})):r.createElement(m,i({ref:e},u))}));function m(t,e){var n=arguments,s=e&&e.mdxType;if("string"==typeof t||s){var o=n.length,i=new Array(o);i[0]=f;var a={};for(var c in e)hasOwnProperty.call(e,c)&&(a[c]=e[c]);a.originalType=t,a[p]="string"==typeof t?t:s,i[1]=a;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},770:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=n(7462),s=(n(7294),n(3905));const o={sidebar_position:1},i="Unit tests",a={unversionedId:"testing/unit-testing",id:"testing/unit-testing",title:"Unit tests",description:"Unit tests will be written with pytest for Discord Classroom to test correct functionality of bot and API.",source:"@site/docs/testing/unit-testing.md",sourceDirName:"testing",slug:"/testing/unit-testing",permalink:"/project-discord-classroom/docs/testing/unit-testing",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Spring/project-discord-classroom/edit/main/documentation/docs/testing/unit-testing.md",tags:[],version:"current",lastUpdatedBy:"rk2357",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Test Procedures",permalink:"/project-discord-classroom/docs/category/test-procedures"},next:{title:"Integration tests",permalink:"/project-discord-classroom/docs/testing/integration-testing"}},c={},l=[],u={toc:l};function p(t){let{components:e,...n}=t;return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"unit-tests"},"Unit tests"),(0,s.kt)("p",null,"Unit tests will be written with pytest for Discord Classroom to test correct functionality of bot and API."),(0,s.kt)("h1",{id:"testping"},"testPing()"),(0,s.kt)("p",null,'Test: If the bot returns the string "pong" in response to "ping" command',(0,s.kt)("br",null),'\nReturn: Will return true if the bot returns the string "pong, otherwise returns false.'),(0,s.kt)("h1",{id:"testhelp"},"testHelp()"),(0,s.kt)("p",null,"Test: Whether a list of commands is sucessfully returned by the bot.",(0,s.kt)("br",null),"\nReturn: True if a string containing the list of commands is returned, otherwise false."),(0,s.kt)("h1",{id:"testdatabaseconnection"},"testDatabaseConnection()"),(0,s.kt)("p",null,"Test: Tests whether the database is able to be connected to.",(0,s.kt)("br",null),"\nReturn: True if database connection was successful, otherwise returns false"),(0,s.kt)("h1",{id:"testinsert"},"testInsert()"),(0,s.kt)("p",null,"Test: Whether the bot successfuly inserted a user into the database.",(0,s.kt)("br",null),'\nReturn: True if the string "Inserted new student" is returned, else false.'))}p.isMDXComponent=!0}}]);