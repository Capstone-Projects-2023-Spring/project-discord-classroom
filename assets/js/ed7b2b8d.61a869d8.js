"use strict";(self.webpackChunktu_cis_4398_docs_template=self.webpackChunktu_cis_4398_docs_template||[]).push([[3961],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),m=d(n),p=r,h=m["".concat(c,".").concat(p)]||m[p]||u[p]||s;return n?a.createElement(h,i(i({ref:t},l),{},{components:n})):a.createElement(h,i({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<s;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5531:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const s={sidebar_position:1},i=void 0,o={unversionedId:"system-architecture/design",id:"system-architecture/design",title:"design",description:"Purpose",source:"@site/docs/system-architecture/design.md",sourceDirName:"system-architecture",slug:"/system-architecture/design",permalink:"/project-discord-classroom/docs/system-architecture/design",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Spring/project-discord-classroom/edit/main/documentation/docs/system-architecture/design.md",tags:[],version:"current",lastUpdatedBy:"KiranNixon",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"System Architecture",permalink:"/project-discord-classroom/docs/category/system-architecture"},next:{title:"API Specification",permalink:"/project-discord-classroom/docs/category/api-specification"}},c={},d=[{value:"Database Design",id:"database-design",level:2},{value:"Sequence Diagrams",id:"sequence-diagrams",level:2}],l={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Purpose")),(0,r.kt)("p",null,"The Design Document - Part I Architecture describes the software architecture and how the requirements are mapped into the design. This document will be a combination of diagrams and text that describes what the diagrams are showing."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Requirements")),(0,r.kt)("p",null,"In addition to the general requirements the Design Document - Part I Architecture will contain:"),(0,r.kt)("p",null,"A description the different components and their interfaces. For example: client, server, database."),(0,r.kt)("p",null,"For each component provide class diagrams showing the classes to be developed (or used) and their relationship."),(0,r.kt)("p",null,"Sequence diagrams showing the data flow for ",(0,r.kt)("em",{parentName:"p"},"all")," use cases.\xa0One sequence diagram corresponds to one use case and different use cases should have different corresponding sequence diagrams."),(0,r.kt)("p",null,"Describe algorithms employed in your project, e.g. neural network paradigm, training and training data set, etc."),(0,r.kt)("p",null,"If there is a database:"),(0,r.kt)("p",null,"Entity-relation diagram."),(0,r.kt)("p",null,"Table design."),(0,r.kt)("p",null,"A check list for architecture design is attached here ",(0,r.kt)("a",{parentName:"p",href:"https://templeu.instructure.com/courses/106563/files/16928870/download?wrap=1",title:"architecture_design_checklist.pdf"},"architecture","_","design","_","checklist.pdf"),"\xa0 and should be used as a guidance."),(0,r.kt)("h2",{id:"database-design"},"Database Design"),(0,r.kt)("mermaid",{value:"---\ntitle: Database Design\n---\nerDiagram\n    CLASSROOM {\n        int id\n        string name\n        int totalAttendance\n        int totalGrade\n    }\n    EDUCATOR {\n        int id\n        string name\n        int classroom_id\n    }\n    STUDENT {\n        int id\n        string name\n        int classroom_id\n        float grade\n        int attendance\n    }\n    ASSIGNMENT {\n        int id\n        int classroom_id\n        string name\n        int maxScore\n        dateFormat startDate\n        dateFormat dueDate\n    }\n    QUIZ {\n        int id\n        int classroom_id\n        string name\n        int maxScore\n        dateFormat startDate\n        dateFormat dueDate\n        int timeLimit\n    }\n    QUESTION {\n        int id\n        int quiz_id\n        string prompt\n        string answer\n        string wrong1\n        string wrong2\n        string wrong3\n    }\n    DISCUSSION {\n       int id\n       int name\n       int maxScore\n       dateFormat startDate\n       dateFormat dueDate \n    }\n    GRADED-ASSIGNMENT {\n        int id\n        int assignment_id\n        int student_id\n        int maxScore\n        int score\n    }\n    GRADED-QUIZ {\n        int id\n        int quiz_id\n        int student_id\n        int maxScore\n        int score\n    }\n    GRADED-DISCUSSION {\n        int id\n        int discussion_id\n        int student_id\n        int maxScore\n        int score\n    }\n    CLASSROOM }|--|{ EDUCATOR : contains\n    CLASSROOM }|--|{ STUDENT : contains\n    CLASSROOM ||--o{ ASSIGNMENT : has\n    CLASSROOM ||--o{ QUIZ : has\n    CLASSROOM ||--o{ DISCUSSION : has\n    QUIZ ||--|{ QUESTION : contains\n    STUDENT }|--o{ GRADED-ASSIGNMENT : has\n    STUDENT }|--o{ GRADED-QUIZ : has\n    STUDENT }|--o{ GRADED-DISCUSSION : has   "}),(0,r.kt)("p",null,"Each time the bot is added to a Discord server a new row is added to the CLASSROOM table. This table holds discord server name and the total attendance and grade used to calculate student's grades and attendance scores. Each CLASSROOM contains one or more EDUCATORS and one or more STUDENTS. The STUDENT table holds the student's username, the classroom they belong to, their grade, and their attendance score. Their total grade will equal their grade divided by the CLASSROOM totalGrade. Next we have the ASSIGNMENT, QUIZ, and DISCUSSION tables. The ASSIGNMENT table keeps track of the assignments the EDUCATOR creates which includes the name of the assignment, when to make it available, and when its due. The QUIZ table keeps track of EDUCATOR created quizzes which holds the max score of the quiz, the start/due date, and an optional time limit for the quiz. Each QUIZ is made up of QUESTIONS which contain a prompt, a correct answer, and optional wrong answers depending on the type of question. (If no wrong answers then its a open-ended question or fill-in-the-blank, if one wrong answer could be a True/False, and if all wrong answers are given then its multiple choice). The DISCUSSION table is used to keep track of the Discussions within the Discord server. These will only include max scores and start/due dates. Finally we have the GRADED tables which are used to hold the scores students got on ASSSIGNMENTS, QUIZZES, and DISCUSSIONS. "),(0,r.kt)("h2",{id:"sequence-diagrams"},"Sequence Diagrams"),(0,r.kt)("p",null,"Teacher !attendance"),(0,r.kt)("mermaid",{value:'\nsequenceDiagram\n    actor Teacher\n    actor Student1\n    actor Student2\n    participant Discord\n    participant ClassroomBot\n    participant Supabase DB\n    Teacher->>Discord: User sends "!attendance" command\n    activate Teacher\n    activate Discord\n    activate Student1\n    activate Student2\n    activate ClassroomBot\n\n    Discord->>ClassroomBot: ClassroomBot reads command from Discord\n    ClassroomBot->>Discord: message to react to for attendance\n    Student1->>Discord: reacts to message\n    Student2->>Discord: reacts to message\n    Teacher->>Discord: command to close attendance\n    Discord->>ClassroomBot: Attendance metrics\n    ClassroomBot ->> Supabase DB: Record attendance for current message/session\n    ClassroomBot ->> Discord: Session attendance summary\n    Discord->> Teacher: Summary of the sessions attendance, + list of missing names\n    deactivate Discord\n    deactivate Teacher\n    deactivate ClassroomBot'}),(0,r.kt)("p",null,"Student !grades"),(0,r.kt)("mermaid",{value:'sequenceDiagram\n    actor Student\n    participant Discord\n    participant ClassroomBot\n    participant FastAPI\n    participant Supabase DB\n    Student->>Discord: User sends "!grades" command\n    activate Student\n    activate Discord\n    Discord->>ClassroomBot: ClassroomBot reads command from Discord\n    activate ClassroomBot\n    ClassroomBot->>FastAPI: GET grades from GRADES table where student_id == Student\n    activate FastAPI\n    FastAPI->>Supabase DB: API request to database\n    activate Supabase DB\n    Supabase DB--\x3e>FastAPI: Returns list of GRADED assignments, quizzes, disucssions\n    deactivate Supabase DB\n    FastAPI --\x3e> ClassroomBot: Sends list from Supabase to bot\n    deactivate FastAPI\n    ClassroomBot --\x3e> Discord: DMs student their grades for each task\n    deactivate ClassroomBot\n    Discord--\x3e> Student: Student reads DM from ClassroomBot\n    deactivate Discord\n    deactivate Student'}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("strong",{parentName:"strong"},"Figure 3.2 Use Case #2 Sequence Diagram: As a user I want to check my grades or attendance in the class."))),(0,r.kt)("p",null,"This diagram shows the process of a student checking their grades (total grade and grade per assignment, quiz, and discussion)."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},'The student types "!grades" command within the classroom discord server.'),(0,r.kt)("li",{parentName:"ol"},"The ClassroomBot reads the command from the server"),(0,r.kt)("li",{parentName:"ol"},"Using FastAPI an API GET request is made for the grades"),(0,r.kt)("li",{parentName:"ol"},"The request is forwarded to the Supabase Database"),(0,r.kt)("li",{parentName:"ol"},"Supabase returns the grades for that student as a list"),(0,r.kt)("li",{parentName:"ol"},"FastAPI sends the list to the application"),(0,r.kt)("li",{parentName:"ol"},"The application parses through the grades and neatly organizes them and direct messages the student their grades"),(0,r.kt)("li",{parentName:"ol"},"The student reads their DMs to check their grades.")))}m.isMDXComponent=!0}}]);