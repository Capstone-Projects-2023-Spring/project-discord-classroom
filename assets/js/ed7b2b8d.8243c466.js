"use strict";(self.webpackChunktu_cis_4398_docs_template=self.webpackChunktu_cis_4398_docs_template||[]).push([[3961],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>p});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var c=n.createContext({}),d=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},l=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=d(a),m=s,p=u["".concat(c,".").concat(m)]||u[m]||h[m]||r;return a?n.createElement(p,o(o({ref:t},l),{},{components:a})):n.createElement(p,o({ref:t},l))}));function p(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,o=new Array(r);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:s,o[1]=i;for(var d=2;d<r;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5531:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var n=a(7462),s=(a(7294),a(3905));const r={sidebar_position:1},o=void 0,i={unversionedId:"system-architecture/design",id:"system-architecture/design",title:"design",description:"Purpose",source:"@site/docs/system-architecture/design.md",sourceDirName:"system-architecture",slug:"/system-architecture/design",permalink:"/project-discord-classroom/docs/system-architecture/design",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Spring/project-discord-classroom/edit/main/documentation/docs/system-architecture/design.md",tags:[],version:"current",lastUpdatedBy:"Salte8",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"System Architecture",permalink:"/project-discord-classroom/docs/category/system-architecture"},next:{title:"API Specification",permalink:"/project-discord-classroom/docs/category/api-specification"}},c={},d=[{value:"Database Design",id:"database-design",level:2},{value:"Sequence Diagrams",id:"sequence-diagrams",level:2}],l={toc:d};function u(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Purpose")),(0,s.kt)("p",null,"The Design Document - Part I Architecture describes the software architecture and how the requirements are mapped into the design. This document will be a combination of diagrams and text that describes what the diagrams are showing."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Requirements")),(0,s.kt)("p",null,"In addition to the general requirements the Design Document - Part I Architecture will contain:"),(0,s.kt)("p",null,"A description the different components and their interfaces. For example: client, server, database."),(0,s.kt)("p",null,"For each component provide class diagrams showing the classes to be developed (or used) and their relationship."),(0,s.kt)("p",null,"Sequence diagrams showing the data flow for ",(0,s.kt)("em",{parentName:"p"},"all")," use cases.\xa0One sequence diagram corresponds to one use case and different use cases should have different corresponding sequence diagrams."),(0,s.kt)("p",null,"Describe algorithms employed in your project, e.g. neural network paradigm, training and training data set, etc."),(0,s.kt)("p",null,"If there is a database:"),(0,s.kt)("p",null,"Entity-relation diagram."),(0,s.kt)("p",null,"Table design."),(0,s.kt)("p",null,"A check list for architecture design is attached here ",(0,s.kt)("a",{parentName:"p",href:"https://templeu.instructure.com/courses/106563/files/16928870/download?wrap=1",title:"architecture_design_checklist.pdf"},"architecture","_","design","_","checklist.pdf"),"\xa0 and should be used as a guidance."),(0,s.kt)("h2",{id:"database-design"},"Database Design"),(0,s.kt)("mermaid",{value:"---\ntitle: Database Design\n---\nerDiagram\n    CLASSROOM {\n        int id PK\n        string name\n        int totalAttendance\n        int totalGrade\n    }\n    EDUCATOR {\n        int id PK\n        string name\n        int classroom_id FK\n    }\n    STUDENT {\n        int id PK\n        string name\n        int classroom_id FK\n        float grade\n        int attendance\n    }\n    ASSIGNMENT {\n        int id PK\n        int classroom_id FK\n        string name\n        int maxScore\n        dateFormat startDate\n        dateFormat dueDate\n    }\n    QUIZ {\n        int id PK\n        int classroom_id FK\n        string name\n        int maxScore\n        dateFormat startDate\n        dateFormat dueDate\n        int timeLimit\n    }\n    QUESTION {\n        int id PK\n        int quiz_id FK\n        string prompt\n        string answer\n        string wrong1\n        string wrong2\n        string wrong3\n    }\n    DISCUSSION {\n       int id PK\n       int classroom_id FK\n       int name\n       int maxScore\n       dateFormat startDate\n       dateFormat dueDate \n    }\n    GRADES {\n        int id PK\n        string type\n        int work_id FK\n        int student_id FK\n        int maxScore\n        int score\n    }\n    CLASSROOM }|--|{ EDUCATOR : contains\n    CLASSROOM }|--|{ STUDENT : contains\n    CLASSROOM ||--o{ ASSIGNMENT : has\n    CLASSROOM ||--o{ QUIZ : has\n    CLASSROOM ||--o{ DISCUSSION : has\n    QUIZ ||--|{ QUESTION : contains\n    STUDENT }|--o{ GRADES : has"}),(0,s.kt)("p",null,"Each time the bot is added to a Discord server a new row is added to the CLASSROOM table. This table holds discord server name and the total attendance and grade used to calculate student's grades and attendance scores. Each CLASSROOM contains one or more EDUCATORS and one or more STUDENTS. The STUDENT table holds the student's username, the classroom they belong to, their grade, and their attendance score. Their total grade will equal their grade divided by the CLASSROOM totalGrade. Next we have the ASSIGNMENT, QUIZ, and DISCUSSION tables. The ASSIGNMENT table keeps track of the assignments the EDUCATOR creates which includes the name of the assignment, when to make it available, and when its due. The QUIZ table keeps track of EDUCATOR created quizzes which holds the max score of the quiz, the start/due date, and an optional time limit for the quiz. Each QUIZ is made up of QUESTIONS which contain a prompt, a correct answer, and optional wrong answers depending on the type of question. (If no wrong answers then its a open-ended question or fill-in-the-blank, if one wrong answer could be a True/False, and if all wrong answers are given then its multiple choice). The DISCUSSION table is used to keep track of the Discussions within the Discord server. These will only include max scores and start/due dates. Finally we have the GRADED tables which are used to hold the scores students got on ASSSIGNMENTS, QUIZZES, and DISCUSSIONS. "),(0,s.kt)("h2",{id:"sequence-diagrams"},"Sequence Diagrams"),(0,s.kt)("p",null,"Teacher !attendance"),(0,s.kt)("mermaid",{value:'\nsequenceDiagram\n    actor Teacher\n    actor Student1\n    actor Student2\n    participant Discord\n    participant ClassroomBot\n    participant Supabase DB\n    Teacher->>Discord: User sends "!attendance" command\n    activate Teacher\n    activate Discord\n    activate Student1\n    activate Student2\n    activate ClassroomBot\n\n    Discord->>ClassroomBot: ClassroomBot reads command from Discord\n    ClassroomBot->>Discord: message to react to for attendance\n    Student1->>Discord: reacts to message\n    Student2->>Discord: reacts to message\n    Teacher->>Discord: command to close attendance\n    Discord->>ClassroomBot: Attendance metrics\n    ClassroomBot ->> Supabase DB: Record attendance for current message/session\n    ClassroomBot ->> Discord: Session attendance summary\n    Discord->> Teacher: Summary of the sessions attendance, + list of missing names\n    deactivate Discord\n    deactivate Teacher\n    deactivate ClassroomBot'}),(0,s.kt)("p",null,"Student !grades"),(0,s.kt)("mermaid",{value:'sequenceDiagram\n    actor Student\n    participant Discord\n    participant ClassroomBot\n    participant FastAPI\n    participant Supabase DB\n    Student->>Discord: User sends "!grades" command\n    activate Student\n    activate Discord\n    Discord->>ClassroomBot: ClassroomBot reads command from Discord\n    activate ClassroomBot\n    ClassroomBot->>FastAPI: GET grades from GRADES table where student_id == Student\n    activate FastAPI\n    FastAPI->>Supabase DB: API request to database\n    activate Supabase DB\n    Supabase DB--\x3e>FastAPI: Returns list of GRADED assignments, quizzes, disucssions\n    deactivate Supabase DB\n    FastAPI --\x3e> ClassroomBot: Sends list from Supabase to bot\n    deactivate FastAPI\n    ClassroomBot --\x3e> Discord: DMs student their grades for each task\n    deactivate ClassroomBot\n    Discord--\x3e> Student: Student reads DM from ClassroomBot\n    deactivate Discord\n    deactivate Student'}),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("strong",{parentName:"strong"},"Figure 3.2 Use Case #2 Sequence Diagram: As a user I want to check my grades or attendance in the class."))),(0,s.kt)("p",null,"This diagram shows the process of a student checking their grades (total grade and grade per assignment, quiz, and discussion)."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},'The student types "!grades" command within the classroom discord server.'),(0,s.kt)("li",{parentName:"ol"},"The ClassroomBot reads the command from the server"),(0,s.kt)("li",{parentName:"ol"},"Using FastAPI an API GET request is made for the grades"),(0,s.kt)("li",{parentName:"ol"},"The request is forwarded to the Supabase Database"),(0,s.kt)("li",{parentName:"ol"},"Supabase returns the grades for that student as a list"),(0,s.kt)("li",{parentName:"ol"},"FastAPI sends the list to the application"),(0,s.kt)("li",{parentName:"ol"},"The application parses through the grades and neatly organizes them and direct messages the student their grades"),(0,s.kt)("li",{parentName:"ol"},"The student reads their DMs to check their grades.")),(0,s.kt)("p",null,"Student wants to take a Practice Quiz"),(0,s.kt)("mermaid",{value:"\nsequenceDiagram\nactor u as Student\nparticipant d as Discord\nparticipant c as ClassroomBot\nparticipant f as FastAPI\nparticipant s as Supabase DB\n\nu->>d: Student types !pquiz in Quiz text channel\nd->>c: Reads command from Discord\nc->>f: GET list of current practice quizes from DataBase\nf->>s: API request from DataBase\ns--\x3e>f: Return list of Practice Quizes\nf--\x3e>c: Sends list from DataBase to ClassRoom Bot\nc--\x3e>d: The Bot lists the available Practice Quizes\nd--\x3e>u: Student reads the list of Quizes they can take\nu->>d: Student types !pquiz 2 in Quiz text channel\nd->>c: Reads command from Discord\nc->>f: GET Practice Quiz 2 from the DataBase\nf->>s: API request from DataBase\ns--\x3e>f: Return Practice Quiz 2\nf--\x3e>c: Sends Practice Quiz 2 from the DatBase to ClassRoom Bot\nc--\x3e>d: The Bot Dms the student the questions for the practice quiz\nd--\x3e>u: Student reads the questions as they are messaged them\nu->>d: Student answers the questions to the Bot via DM\nd->>c: Reads answers and copies them\nc->>f: PUSH answers to DataBase\nf->>s: Record students answers\ns--\x3e>f: Return Student answers and Practice Quiz answers \nf--\x3e>c: Compare the answers and Return Correct and incorect answers \nc--\x3e>d: The Bot DMs the results to the student\nd--\x3e>u: Student knows where they stand on the topic by the results"}),(0,s.kt)("p",null,"This Diagram shows the process of a student wanting to take a Practice Quiz."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Student types !pquiz"),(0,s.kt)("li",{parentName:"ol"},"The Bot reads the command and sends a request for the list of quizzes available to the API."),(0,s.kt)("li",{parentName:"ol"},"The API gets the data from the database and returns it to the Bot."),(0,s.kt)("li",{parentName:"ol"},"The Bot lists the available quizzes."),(0,s.kt)("li",{parentName:"ol"},"The Student reads the available quizzes and types !pquiz 2 to take the quiz they want."),(0,s.kt)("li",{parentName:"ol"},"The bot reads the command and send the request for the specific quiz to the API."),(0,s.kt)("li",{parentName:"ol"},"The API gets the questions from the database and returns them to the Bot."),(0,s.kt)("li",{parentName:"ol"},"The Bot DMs the student the questions."),(0,s.kt)("li",{parentName:"ol"},"The Student answers the questions."),(0,s.kt)("li",{parentName:"ol"},"The Bot reads the answers and pushes them to the API."),(0,s.kt)("li",{parentName:"ol"},"The API pushes the answers to the Database to be saved and then returns the answers key for the quiz and the student answers."),(0,s.kt)("li",{parentName:"ol"},"The API compares the two and returns the incorrect and correct answers to the Bot."),(0,s.kt)("li",{parentName:"ol"},"The Bot messages the Student their results."),(0,s.kt)("li",{parentName:"ol"},"The student knows where they stand on the topic due to their results.")),(0,s.kt)("p",null,"Student wants to ask the teacher a question"),(0,s.kt)("mermaid",{value:'\nsequenceDiagram\n    actor Student\n    actor Teacher\n    participant Discord\n    participant ClassroomBot\n    Student->>Discord: User sends "!ticketcreate" command\n    activate Student\n    activate Discord\n    Discord->>ClassroomBot: ClassroomBot reads command from Discord\n    activate ClassroomBot\n    ClassroomBot->>Discord: creates a new private chat\n    deactivate ClassroomBot\n    activate Teacher\n    Discord->>Teacher: Teacher is added to private chat\n    Discord->>Student: Student is added to private chat\n    Student->>Discord: Student asks question in chat\n    Discord->>Teacher: Teacher receives question\n    Teacher->>Discord: Teacher responds to question\n    Discord->>Student: Student receives teacher\'s response\n    deactivate Discord\n    deactivate Teacher\n    deactivate Student\n    '}),(0,s.kt)("p",null,"This diagram shows a student asking a question to the teacher by creating a ticket for a private chat"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},'Student types "!ticketCreate" command'),(0,s.kt)("li",{parentName:"ol"},"ClassroomBot reads the command from discord"),(0,s.kt)("li",{parentName:"ol"},"The bot creates a new private chat"),(0,s.kt)("li",{parentName:"ol"},"The teacher and student are added to the private chat"),(0,s.kt)("li",{parentName:"ol"},"Student can message the question to the teacher"),(0,s.kt)("li",{parentName:"ol"},"Teacher responds to the students question"),(0,s.kt)("li",{parentName:"ol"},"Student receives the teacher's response")))}u.isMDXComponent=!0}}]);